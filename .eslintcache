[{"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\index.tsx":"1","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\reportWebVitals.ts":"2","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\App.tsx":"3","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Routes.tsx":"4","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\language.ts":"5","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\theme.ts":"6","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\index.tsx":"7","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\index.tsx":"8","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\trans.ts":"9","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\styles.ts":"10","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\index.tsx":"11","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\trans.ts":"12","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\styles.ts":"13","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\index.tsx":"14","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\styles.ts":"15","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\trans.ts":"16","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\index.tsx":"17","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\styles.ts":"18","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\trans.ts":"19","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\hooks.ts":"20","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\methods.ts":"21","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\index.tsx":"22","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\styles.ts":"23","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\trans.ts":"24","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\index.tsx":"25","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\styles.ts":"26","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\trans.ts":"27","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\index.tsx":"28","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\trans.ts":"29","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\styles.ts":"30","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\hooks.ts":"31","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\commands.ts":"32","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\utils.ts":"33","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\client.ts":"34","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\config.ts":"35","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\index.tsx":"36","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\trans.ts":"37","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\styles.ts":"38"},{"size":528,"mtime":1608063219979,"results":"39","hashOfConfig":"40"},{"size":440,"mtime":1608063219985,"results":"41","hashOfConfig":"40"},{"size":893,"mtime":1608489050755,"results":"42","hashOfConfig":"40"},{"size":433,"mtime":1608490440446,"results":"43","hashOfConfig":"40"},{"size":51,"mtime":1608063219986,"results":"44","hashOfConfig":"40"},{"size":493,"mtime":1608488219694,"results":"45","hashOfConfig":"40"},{"size":190,"mtime":1608490400351,"results":"46","hashOfConfig":"40"},{"size":1003,"mtime":1608063219982,"results":"47","hashOfConfig":"40"},{"size":271,"mtime":1608063219984,"results":"48","hashOfConfig":"40"},{"size":292,"mtime":1608063219983,"results":"49","hashOfConfig":"40"},{"size":1096,"mtime":1608489050774,"results":"50","hashOfConfig":"40"},{"size":245,"mtime":1608063219981,"results":"51","hashOfConfig":"40"},{"size":347,"mtime":1608406325908,"results":"52","hashOfConfig":"40"},{"size":1336,"mtime":1608489050757,"results":"53","hashOfConfig":"40"},{"size":612,"mtime":1608489050758,"results":"54","hashOfConfig":"40"},{"size":242,"mtime":1608063492271,"results":"55","hashOfConfig":"40"},{"size":1892,"mtime":1608490292336,"results":"56","hashOfConfig":"40"},{"size":841,"mtime":1608489946563,"results":"57","hashOfConfig":"40"},{"size":242,"mtime":1608064421803,"results":"58","hashOfConfig":"40"},{"size":1078,"mtime":1608489050752,"results":"59","hashOfConfig":"40"},{"size":586,"mtime":1608148950673,"results":"60","hashOfConfig":"40"},{"size":2810,"mtime":1608586249749,"results":"61","hashOfConfig":"40"},{"size":1039,"mtime":1608488763589,"results":"62","hashOfConfig":"40"},{"size":1518,"mtime":1608489850265,"results":"63","hashOfConfig":"40"},{"size":1937,"mtime":1608489610504,"results":"64","hashOfConfig":"40"},{"size":1144,"mtime":1608489888554,"results":"65","hashOfConfig":"40"},{"size":242,"mtime":1608489050770,"results":"66","hashOfConfig":"40"},{"size":2946,"mtime":1608490521257,"results":"67","hashOfConfig":"40"},{"size":242,"mtime":1608489050767,"results":"68","hashOfConfig":"40"},{"size":292,"mtime":1608489050766,"results":"69","hashOfConfig":"40"},{"size":802,"mtime":1608489050776,"results":"70","hashOfConfig":"40"},{"size":658,"mtime":1608491063879,"results":"71","hashOfConfig":"40"},{"size":432,"mtime":1608489050754,"results":"72","hashOfConfig":"40"},{"size":2330,"mtime":1608491051231,"results":"73","hashOfConfig":"40"},{"size":140,"mtime":1608489050772,"results":"74","hashOfConfig":"40"},{"size":1420,"mtime":1608491094572,"results":"75","hashOfConfig":"40"},{"size":242,"mtime":1608490163263,"results":"76","hashOfConfig":"40"},{"size":292,"mtime":1608490163264,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"173fyhu",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\index.tsx",[],["164","165"],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\reportWebVitals.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\App.tsx",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Routes.tsx",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\language.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\theme.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\index.tsx",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\index.tsx",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\WrongPage\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\index.tsx",["166"],"// Deps scoped imports.\r\nimport React from \"react\";\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport cx from \"classnames\";\r\n\r\n// Project scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\nimport Card from \"components/PostCard\";\r\nimport { usePosts } from \"api/hooks\";\r\n\r\n/**\r\n * Home component \r\n * @description This is the main view.\r\n * @version 1.0.0\r\n * @author Mike Eling <mike.eling97@gmail.com>\r\n */\r\nconst Home = (props: ComponentProps) => {\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n    const [posts, refetch, next, prev] = usePosts();\r\n\r\n    return <div className={cx(classes.root, props.className)} style={props.style}>\r\n        <h4 className={classes.h4}>{translated.title}</h4>\r\n\r\n    <div className={classes.container}>\r\n        {posts === null ? <h4>Loading</h4> : posts.map(post => <Card key={post?.id} date={post?.date ?? \"Invalid date\"} title={post?.title?.rendered ?? \"Invalid title\"} thumbnailUrl={\"https://media.giphy.com/media/SggILpMXO7Xt6/giphy.gif\"} />)}\r\n    </div>\r\n    <Button onClick={prev}>Prev</Button>\r\n    <Button onClick={next}>Next</Button>\r\n    </div>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype ComponentProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default Home;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Home\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\index.tsx",["167","168"],"// Deps scoped imports.\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport cx from \"classnames\";\r\n\r\n// Project scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\n\r\n/**\r\n * Example component\r\n * @description This is an example component including translations and theming.\r\n * @version 1.0.0\r\n * @author Mike Eling <mike.eling97@gmail.com>\r\n */\r\nconst Navbar = (props: NavbarProps) => {\r\n    const history = useHistory();\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n\r\n    if(history.location.pathname === \"/\") return null;\r\n\r\n    return <div className={cx(classes.root, props.className)} style={props.style}>     \r\n    <div className={classes.container}>  \r\n        <img className={classes.logo} src=\"https://latwypieniadz.pl/wp-content/uploads/2020/12/favicon_2.png\" />\r\n    </div>\r\n    </div>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype NavbarProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default Navbar;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Navbar\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\index.tsx",["169","170"],"// Deps scoped imports.\r\nimport React from \"react\";\r\nimport { CardContent, makeStyles, Typography, Card } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport cx from \"classnames\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// Project scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\n\r\n/**\r\n * Example component\r\n * @description This is an example component including translations and theming.\r\n * @version 1.0.0\r\n * @author Damian Błochowiak\r\n */\r\nconst PostCard = (props: PostCardProps) => {\r\n    const history = useHistory();\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n\r\n    const navigate = (path: string) => () => {\r\n        history.push(path);\r\n    }\r\n\r\n    return <Card variant=\"outlined\" className={cx(classes.root, props.className)} style={props.style} onClick={navigate(`/p/${props.uid}`)}>     \r\n        <CardContent className={classes.container}>\r\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}}>\r\n                <Typography style={{ fontWeight: \"bold\", marginTop: 10 }} variant=\"h4\">{props.title}</Typography>\r\n                <Typography style={{opacity: .6}}>{props.date}</Typography>\r\n            </div>\r\n            <div style={{position: \"relative\"}} className={classes.thumbnailContainer}>\r\n                <img style={{position: \"absolute\"}} className={classes.thumbnail} src={props.thumbnailUrl} />\r\n            </div>\r\n        </CardContent>\r\n    </Card>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype PostCardProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n    title: string;\r\n    date: string;\r\n    thumbnailUrl: string;\r\n    uid: number;\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default PostCard;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostCard\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\hooks.ts",["171","172"],"import { useCallback, useRef, useState } from \"react\";\r\nimport WPClient from \"./methods\";\r\n\r\nconst wpClient = new WPClient();\r\n\r\nexport const usePosts = (include?: number[]) => {\r\n    const [page, setPage] = useState<number>(1);\r\n    const [posts, setPosts] = useState(null as unknown as any[]);\r\n    const ref = useRef(null as unknown as RefApi);\r\n\r\n    \r\n\r\n    if(ref.current === null) {\r\n        const fetchData = \r\n            async (pge: number = 1) => {\r\n                const pg = [\"page\", pge];\r\n                const maxPg = [\"per_page\", 2];\r\n                const inc = include ? [\"include\", include.join(\",\")] : undefined;\r\n                const args = [inc, pg, maxPg].filter(arg => arg !== undefined)  as [string, string][];\r\n    \r\n                setPosts(await wpClient.getData(\"posts\", args))\r\n            }\r\n\r\n        const nextPage = () => {setPage(p => { fetchData(p + 1); return p + 1})}\r\n        const prevPage = () => {setPage(p => { fetchData(p - 1); return p - 1})}\r\n\r\n        ref.current = [posts, fetchData, nextPage, prevPage];\r\n        fetchData();\r\n    }\r\n    ref.current[0] = posts;\r\n\r\n    return ref.current;\r\n}\r\n\r\ntype RefApi = [any[], (page?: number) => void, () => void, () => void];","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\methods.ts",[],["173","174"],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\index.tsx",["175"],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Startup\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\index.tsx",["176"],"// Deps scoped imports.\r\nimport React, { useState } from \"react\";\r\nimport { Button, Drawer, makeStyles } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport cx from \"classnames\";\r\n\r\n// Project scoped imports.\r\nimport Navbar from \"components/Navbar\";\r\n\r\n// Component scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\n\r\n/**\r\n * Example component\r\n * @description This is an example component including translations and theming.\r\n * @version 1.0.0\r\n * @author Mike Eling <mike.eling97@gmail.com>\r\n */\r\nconst Sidebar = (props: SidebarProps) => {\r\n    const location = useLocation();\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n\r\n    const [shown, setShown] = useState(true);\r\n\r\n    // Zmienić tu jeśli drawer ma się wyświetlać na innych stronach poza home.\r\n    const disabled = location.pathname !== \"/home\";\r\n\r\n    return <>\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={shown && !disabled}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            Moj drawer lol.\r\n            <Button onClick={() => setShown(false)}>Close</Button>\r\n        </Drawer>\r\n\r\n        <div className={cx(classes.content, {\r\n            [classes.contentShift]: !shown,\r\n            [classes.contentHidden]: disabled\r\n        })}>\r\n            <Navbar onMenuOpen={() => setShown(true)} />\r\n            {props.children}\r\n        </div>\r\n    </>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\n// @ts-ignore\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype SidebarProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties,\r\n    children: JSX.Element | JSX.Element[]\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default Sidebar;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\Sidebar\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\index.tsx",["177"],"// Deps scoped imports.\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport cx from \"classnames\";\r\n\r\n// Project scoped imports.\r\nimport { useForkedState } from \"utils/hooks\";\r\nimport { useCommand } from \"api/hooks\";\r\nimport { Posts } from \"api/commands\";\r\nimport { isLoaded } from \"api/utils\";\r\nimport PostCard from \"../PostCard/\";\r\nimport { Post } from \"api/types\";\r\n\r\n// Component scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\n\r\n/**\r\n * Lista wszystkich postów z paginacją.\r\n * @version 1.0.0\r\n * @author Mike Eling <mike.eling97@gmail.com>\r\n */\r\nconst PostList = (props: ComponentProps) => {\r\n    const [page, setPage] = useState(1);\r\n    const [perPage, setPerPage] = useState(10);\r\n    const postsRq = useCommand(Posts, { page, per_page: perPage });\r\n    const [posts] = useForkedState<any, Post[]>(rq => isLoaded(rq) ? rq.data : null, postsRq);\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement, MouseEvent> | null, newPage: number) => {\r\n        setPage(newPage + 1);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPerPage(parseInt(event.target.value, 10));\r\n        setPage(1);\r\n    };\r\n\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n\r\n    return <div className={cx(classes.root, props.className)} style={props.style}>\r\n        {posts === null ?\r\n            <h4>Loading</h4> :\r\n            posts.map(post => <PostItem {...post} />)}\r\n\r\n        <TablePagination\r\n            component=\"div\"\r\n            count={Number(postsRq?.headers?.get(\"x-wp-total\") ?? 100)}\r\n            page={page - 1}\r\n            onChangePage={handleChangePage}\r\n            rowsPerPage={perPage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n    </div>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype ComponentProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties\r\n}\r\n\r\nconst DEFAULT_THUMBNAIL_URL = \"https://media.giphy.com/media/SggILpMXO7Xt6/giphy.gif\"\r\n\r\nconst PostItem = (post: Post) => {\r\n    const [thumbnailUrl, setThumbnailUrl] = useState(DEFAULT_THUMBNAIL_URL);\r\n\r\n    useEffect(() => {\r\n        fetch(post._links?.[\"wp:attachment\"]?.[0]?.href)\r\n            .then(data => data.json())\r\n            .then(data => setThumbnailUrl(data?.[0]?.source_url ?? \"https://media.giphy.com/media/SggILpMXO7Xt6/giphy.gif\"));\r\n    }, [post, post?.id])\r\n\r\n    return <PostCard key={post?.id} date={post?.date ?? \"Invalid date\"} uid={post?.id ?? -1} title={post?.title?.rendered ?? \"Invalid title\"} thumbnailUrl={thumbnailUrl} />;\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default PostList;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\components\\PostList\\styles.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\utils\\hooks.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\commands.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\utils.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\api\\client.ts",["178"],"export type TResponse = { status: number, message?: string, data: any };\r\n\r\nexport interface IClient {\r\n    url: string\r\n}\r\n\r\nexport class Client implements IClient {\r\n    url: string\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n    }\r\n\r\n    makeArguments(args?: { [key: string]: string }) {\r\n        if(!args) return \"\";\r\n        return \"?\" + Object.entries(args).map((e => `${e[0]}=${typeof e[1] === \"object\" ? JSON.stringify(e[1]) : e[1]}`)).join(\"&\");\r\n    }\r\n\r\n    execute(command: ICommand) {\r\n        return new Promise<{ status: number, data: any, headers: Headers }>((resolve, reject) => {\r\n            let once = false;\r\n            const cmd = command.exec[0];\r\n            const args = this.makeArguments(command.exec[1]);\r\n\r\n            const reqUrl = `${this.url}${cmd}${args}`;\r\n\r\n            const handleResolve = async (response: Response) => {\r\n                if (!once) {\r\n                    once = true;\r\n\r\n                    const status = response.status;\r\n                    const parsed_response = await response.json();\r\n\r\n                    if (status !== 200 && status !== 204) {\r\n                        reject({ status, message: parsed_response.message, headers: response.headers });\r\n                        return;\r\n                    }\r\n\r\n                    console.log(\"📶\", cmd, \"=>\", response.status, parsed_response);\r\n                    resolve({ status: response.status, data: parsed_response, headers: response.headers });\r\n                }\r\n\r\n            }\r\n\r\n            let headers = new Headers({\r\n                'Access-Control-Allow-Origin': '*',\r\n                'Content-Type': 'multipart/form-data'\r\n            });\r\n\r\n            fetch(reqUrl, /*{ mode: \"cors\", headers }*/)\r\n                .then(handleResolve)\r\n                .catch(reject);\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport interface ICommand {\r\n    exec: [string, { [key: string]: any }] | [string];\r\n    status: number;\r\n\r\n    parse(status: number, data: any): any\r\n}\r\n\r\nexport class Command implements ICommand {\r\n    exec: [string, { [key: string]: any }] | [string];\r\n    status: number;\r\n\r\n    constructor(exec: [string, { [key: string]: any }] | [string]) {\r\n        this.exec = exec;\r\n        this.status = 0;\r\n    }\r\n\r\n    parse(status: number, data: any) {\r\n        return data;\r\n    }\r\n}","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\config.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\index.tsx",["179"],"// Deps scoped imports.\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useLittera } from \"react-littera\";\r\nimport cx from \"classnames\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n// Project scoped imports.\r\nimport styles from \"./styles\";\r\nimport translations from \"./trans\";\r\nimport { useCommand } from \"api/hooks\";\r\nimport { GetPost } from \"api/commands\";\r\nimport { useForkedState } from \"utils/hooks\";\r\nimport { isLoaded } from \"api/utils\";\r\n\r\n/**\r\n * Post component\r\n * @version 1.0.0\r\n * @author Mike Eling <mike.eling97@gmail.com>\r\n */\r\nconst Post = (props: PostProps) => {\r\n    const params = useParams() as unknown as {id: number};\r\n    const translated = useLittera(translations);\r\n    const classes = useStyles();\r\n\r\n    const postRq = useCommand(GetPost, Number(params?.id ?? 0));\r\n    const [post] = useForkedState(rq => isLoaded(rq) ? rq.data : null, postRq);\r\n\r\n    console.log(post);\r\n\r\n    if(!post) return <>Loading</>;\r\n\r\n    return <div className={cx(classes.root, props.className)} style={props.style}>\r\n        <h4 className={classes.h4}>{post?.title?.rendered ?? \"Invalid title\"}</h4>\r\n    </div>\r\n}\r\n\r\n// Creates a hook for generating classnames.\r\nconst useStyles = makeStyles(styles);\r\n\r\n// Props the component accepts.\r\ntype PostProps = {\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\n// Time to export! 🚚\r\nexport default Post;","C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\trans.ts",[],"C:\\Users\\xomod\\Documents\\GitHub\\cra-website-template\\src\\pages\\Post\\styles.ts",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":22,"column":19,"nodeType":"186","messageId":"187","endLine":22,"endColumn":26},{"ruleId":"184","severity":1,"message":"188","line":20,"column":11,"nodeType":"186","messageId":"187","endLine":20,"endColumn":21},{"ruleId":"189","severity":1,"message":"190","line":27,"column":9,"nodeType":"191","endLine":27,"endColumn":113},{"ruleId":"184","severity":1,"message":"188","line":20,"column":11,"nodeType":"186","messageId":"187","endLine":20,"endColumn":21},{"ruleId":"189","severity":1,"message":"190","line":34,"column":17,"nodeType":"191","endLine":34,"endColumn":110},{"ruleId":"184","severity":1,"message":"192","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":21},{"ruleId":"184","severity":1,"message":"193","line":7,"column":12,"nodeType":"186","messageId":"187","endLine":7,"endColumn":16},{"ruleId":"180","replacedBy":"194"},{"ruleId":"182","replacedBy":"195"},{"ruleId":"189","severity":1,"message":"190","line":50,"column":17,"nodeType":"191","endLine":50,"endColumn":69},{"ruleId":"184","severity":1,"message":"188","line":23,"column":11,"nodeType":"186","messageId":"187","endLine":23,"endColumn":21},{"ruleId":"184","severity":1,"message":"188","line":40,"column":11,"nodeType":"186","messageId":"187","endLine":40,"endColumn":21},{"ruleId":"184","severity":1,"message":"196","line":45,"column":17,"nodeType":"186","messageId":"187","endLine":45,"endColumn":24},{"ruleId":"184","severity":1,"message":"188","line":23,"column":11,"nodeType":"186","messageId":"187","endLine":23,"endColumn":21},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"@typescript-eslint/no-unused-vars","'refetch' is assigned a value but never used.","Identifier","unusedVar","'translated' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useCallback' is defined but never used.","'page' is assigned a value but never used.",["197"],["198"],"'headers' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]